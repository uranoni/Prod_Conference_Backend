enum RoleEnum {
  ADMIN
  JUROR
  USER
}

type Query {
  checkToken: User
  getUsers: [User!]!
  users: [User]
}

type Mutation {
  signup(email: String, username: String, password: String): User
  login(email: String, password: String): User
  logout: LogoutResponse @isAuthenticated
  updateUser(data: UserInput): User @isAuthenticated
  jurorVerifyEmail(name: String!, email: String!, labels: [String]): User!
  verifyAccount(token: String): User
}

type Token {
  id: ID
  token: String
  device: String
  requestIp: String
}

type User {
  id: ID!
  username: String!
  email: String!
  access: Access
  tokens: [Token]!
  verify: Boolean
  labels: [String]
  verifyToken: TokenData
}

type TokenData {
  token: String
  exp: Date
}
type Access {
  role: RoleEnum
  group: String
}

type LogoutResponse {
  message: String
}

input UserInput {
  id: String
  username: String
  email: String
  access: AccessInput
}

input AccessInput {
  group: String
  role: RoleEnum
}

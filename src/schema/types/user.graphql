scalar Date
type Token {
    id: ID
    token: String
    device: String
    requestIp: String
}

type User {
    id: ID!
    username: String!
    email: String!
    access: Access
    tokens: [Token]!
    verify:Boolean
    labels:[String]
    verifyToken:TokenData
}
type TokenData{
    token:String
    exp:Date
}
type Access {
    role: String
    group: String
}
type Query {
    checkToken: User
    getUsers: [User!]!
}

type Mutation {
    signup(
        email: String,
        username: String,
        password: String
    ): User
    login(
        email: String,
        password: String
    ): User
    logout: LogoutResponse
    updateUser(data: UserInput): User
    jurorVerifyEmail(
        name:String!,
        email:String!,
        labels:[String]
        ):User!
    verifyAccount(token:String):User
}

input UserInput {
    id: String
    username: String
    email: String
    access: AccessInput
}

input AccessInput {
    group: String
    role: String
}

type LogoutResponse {
  message: String
}
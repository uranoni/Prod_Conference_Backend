enum SortByEnum {
  UPDATE
  ID
}

enum PostiveEnum {
  ASC
  DESC
}

enum DeleteMsgEnum {
  SUCCESS
  FAIL
}

type Query {
  getPosts(skip: Int, limit: Int, sort: SortInput, category: [String]): [Post]
  getPost(postPid: String): Post
}

type Mutation {
  submitPost(data: SubmitPostData!, pictures: [Pictures]): Post!
    @isForbidden(role: ["ADMIN"])
    @isAuthenticated
  updataPost(postPid: ID!, data: UpdatePostInput!): Post!
    @isForbidden(role: ["ADMIN"])
    @isAuthenticated
  deletePost(postPid: ID!): deleteResponse
    @isForbidden(role: ["ADMIN"])
    @isAuthenticated
}

type deleteResponse {
  deleteMsg: DeleteMsgEnum
  deletePid: ID
  title: String
}

type Post {
  pid: String!
  title: String!
  content: String!
  category: String!
  author: [AuthorData]
  picture: [Picture]
  published: Boolean
  createdAt: Date
  updatedAt: Date
}

type Picture {
  picID: String
  description: String
  path: String
  picdate: String
}

type AuthorData {
  author: String
  description: String
  contact: String
}

input SubmitPostData {
  title: String!
  content: String!
  published: Boolean
  category: String!
}

input Pictures {
  picID: String
  description: String
  path: String
  picdate: String
}

input UpdatePostInput {
  title: String
  content: String
  category: String
}

input SortInput {
  sortBy: SortByEnum
  postive: PostiveEnum
}
